========== tables ==========
// --- GLOBAL TYPEDEFS ---
typedef struct _file_s_0 FILE_0;
// --- FUNCTION DECLARATIONS ---
int char_to_int_20(char);
char int_to_char_25(int);
int main_30(int,char**);
void*memset_0(void*,int,int);
int printf_0(const char*,...);
int scanf_0(const char*,...);
int sprintf_0(char*,const char*,...);
int sscanf_0(const char*,const char*,...);
char to_char_10(char);
int to_int_5(int);
const char*to_pointer_15(const char*);
// --- GLOBAL VARIABLES ---
_Bool b_3;
// --- FUNCTION DEFINITIONS ---
int char_to_int_20(char a_20){
}
char int_to_char_25(int a_25){
}
int main_30(int argc_30,char**argv_30){
	{
		int i_34;
		int j_34;
		int k_34;
		const char*p_35;
		char x_33;
		char y_33;
	}
	{
		int i_50;
		int j_50;
		int k_50;
		const char*p_51;
		char x_49;
		char y_49;
	}
}
char to_char_10(char a_10){
}
int to_int_5(int a_5){
}
const char*to_pointer_15(const char*a_15){
}
========== IR module ==========
::: ; ModuleID = 'test'
::: source_filename = "test"
::: 
::: @b = global i1 false
::: @0 = private unnamed_addr constant [5 x i8] c"Test\00", align 1
::: @1 = private unnamed_addr constant [50 x i8] c"to_int(x)=0x%x k=0x%x i=%d j=0x%x to_int(y)=0x%x\0A\00", align 1
::: @2 = private unnamed_addr constant [37 x i8] c"x='%c' k=%d p=\22%s\22 i=%d j=%d y='%c'\0A\00", align 1
::: @3 = private unnamed_addr constant [5 x i8] c"Test\00", align 1
::: @4 = private unnamed_addr constant [50 x i8] c"to_int(x)=0x%x k=0x%x i=%d j=0x%x to_int(y)=0x%x\0A\00", align 1
::: @5 = private unnamed_addr constant [37 x i8] c"x='%c' k=%d p=\22%s\22 i=%d j=%d y='%c'\0A\00", align 1
::: 
::: declare i32 @ckrt_printf(i8*, ...)
::: 
::: declare i32 @ckrt_scanf(i8*, ...)
::: 
::: declare i32 @ckrt_sprintf(i8*, i8*, ...)
::: 
::: declare i32 @ckrt_sscanf(i8*, i8*, ...)
::: 
::: declare i8* @ckrt_memset(i8*, i32, i32)
::: 
::: define i32 @to_int(i32 %0) {
::: prolog:
:::   %a = alloca i32
:::   store i32 %0, i32* %a
:::   br label %start
::: 
::: start:                                            ; preds = %prolog
:::   %load = load i32, i32* %a
:::   ret i32 %load
::: }
::: 
::: define i8 @to_char(i8 %0) {
::: prolog:
:::   %a = alloca i8
:::   store i8 %0, i8* %a
:::   br label %start
::: 
::: start:                                            ; preds = %prolog
:::   %load = load i8, i8* %a
:::   ret i8 %load
::: }
::: 
::: define i8* @to_pointer(i8* %0) {
::: prolog:
:::   %a = alloca i8*
:::   store i8* %0, i8** %a
:::   br label %start
::: 
::: start:                                            ; preds = %prolog
:::   %load = load i8*, i8** %a
:::   ret i8* %load
::: }
::: 
::: define i32 @char_to_int(i8 %0) {
::: prolog:
:::   %a = alloca i8
:::   store i8 %0, i8* %a
:::   br label %start
::: 
::: start:                                            ; preds = %prolog
:::   %load = load i8, i8* %a
:::   %CreateZExt = zext i8 %load to i32
:::   ret i32 %CreateZExt
::: }
::: 
::: define i8 @int_to_char(i32 %0) {
::: prolog:
:::   %a = alloca i32
:::   store i32 %0, i32* %a
:::   br label %start
::: 
::: start:                                            ; preds = %prolog
:::   %load = load i32, i32* %a
:::   %CreateTrunc = trunc i32 %load to i8
:::   ret i8 %CreateTrunc
::: }
::: 
::: define i32 @main(i32 %0, i8** %1) {
::: prolog:
:::   %argc = alloca i32
:::   store i32 %0, i32* %argc
:::   %argv = alloca i8**
:::   store i8** %1, i8*** %argv
:::   %x = alloca i8
:::   %y = alloca i8
:::   %i = alloca i32
:::   %j = alloca i32
:::   %k = alloca i32
:::   %p = alloca i8*
:::   %x17 = alloca i8
:::   %y18 = alloca i8
:::   %i19 = alloca i32
:::   %j20 = alloca i32
:::   %k21 = alloca i32
:::   %p22 = alloca i8*
:::   br label %start
::: 
::: start:                                            ; preds = %prolog
:::   store i8 88, i8* %x
:::   store i32 16193, i32* %k
:::   store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i8** %p
:::   %load = load i1, i1* @b
:::   %zext = zext i1 %load to i32
:::   store i32 %zext, i32* %i
:::   %load1 = load i8, i8* %x
:::   %zext2 = zext i8 %load1 to i32
:::   store i32 %zext2, i32* %j
:::   %load3 = load i32, i32* %k
:::   %trunc = trunc i32 %load3 to i8
:::   store i8 %trunc, i8* %y
:::   %load4 = load i8, i8* %x
:::   %zext5 = zext i8 %load4 to i32
:::   %2 = call i32 @to_int(i32 %zext5)
:::   %load6 = load i8, i8* %y
:::   %zext7 = zext i8 %load6 to i32
:::   %3 = call i32 @to_int(i32 %zext7)
:::   %load8 = load i32, i32* %k
:::   %load9 = load i32, i32* %i
:::   %load10 = load i32, i32* %j
:::   %4 = call i32 (i8*, ...) @ckrt_printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @1, i32 0, i32 0), i32 %2, i32 %load8, i32 %load9, i32 %load10, i32 %3)
:::   %load11 = load i8, i8* %x
:::   %load12 = load i32, i32* %k
:::   %load13 = load i8*, i8** %p
:::   %load14 = load i32, i32* %i
:::   %load15 = load i32, i32* %j
:::   %load16 = load i8, i8* %y
:::   %5 = call i32 (i8*, ...) @ckrt_printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0), i8 %load11, i32 %load12, i8* %load13, i32 %load14, i32 %load15, i8 %load16)
:::   %6 = call i8 @to_char(i8 88)
:::   store i8 %6, i8* %x17
:::   %7 = call i32 @to_int(i32 16193)
:::   store i32 %7, i32* %k21
:::   %8 = call i8* @to_pointer(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0))
:::   store i8* %8, i8** %p22
:::   %load23 = load i1, i1* @b
:::   %zext24 = zext i1 %load23 to i32
:::   %9 = call i32 @to_int(i32 %zext24)
:::   store i32 %9, i32* %i19
:::   %load25 = load i8, i8* %x17
:::   %10 = call i32 @char_to_int(i8 %load25)
:::   store i32 %10, i32* %j20
:::   %load26 = load i32, i32* %k21
:::   %11 = call i8 @int_to_char(i32 %load26)
:::   store i8 %11, i8* %y18
:::   %load27 = load i8, i8* %x17
:::   %zext28 = zext i8 %load27 to i32
:::   %12 = call i32 @to_int(i32 %zext28)
:::   %load29 = load i8, i8* %y18
:::   %zext30 = zext i8 %load29 to i32
:::   %13 = call i32 @to_int(i32 %zext30)
:::   %load31 = load i32, i32* %k21
:::   %load32 = load i32, i32* %i19
:::   %load33 = load i32, i32* %j20
:::   %14 = call i32 (i8*, ...) @ckrt_printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @4, i32 0, i32 0), i32 %12, i32 %load31, i32 %load32, i32 %load33, i32 %13)
:::   %load34 = load i8, i8* %x17
:::   %load35 = load i32, i32* %k21
:::   %load36 = load i8*, i8** %p22
:::   %load37 = load i32, i32* %i19
:::   %load38 = load i32, i32* %j20
:::   %load39 = load i8, i8* %y18
:::   %15 = call i32 (i8*, ...) @ckrt_printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @5, i32 0, i32 0), i8 %load34, i32 %load35, i8* %load36, i32 %load37, i32 %load38, i8 %load39)
:::   ret i32 0
::: }
========== starting main() ==========
to_int(x)=0x58 k=0x3f41 i=0 j=0x58 to_int(y)=0x41
x='X' k=16193 p="Test" i=0 j=88 y='A'
to_int(x)=0x58 k=0x3f41 i=0 j=0x58 to_int(y)=0x41
x='X' k=16193 p="Test" i=0 j=88 y='A'

========== main() returned 0 ==========
========== cecko4 done ==========
